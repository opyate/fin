(ns ui.els
  (:require [db.dao :as dao]
             [clojure.string :as string]))
(defn parse-tag [tag]
  tag)

(defelem tag-debug [{:keys [from]}]
  (ol
   (for-tpl [tag-pair from]
            (li (cell= (str tag-pair))))))
(defelem render-tx [{:keys [tx tags]}]
  (let [id (cell= (string/replace (str tx) #"[^a-zA-Z0-9]" ""))
        amount (cell= (:amount tx))
        description (cell= (:description tx))
        date (cell= (:date tx))
        tag (cell= (:tag tx))
        new-tag (cell "")
        parsed (cell= (parse-tag new-tag))]
    (tr
     (cond-tpl
      ;;tag (td :class (cell= (str tag "-class")) (span tag))
      tag (td :id id :class tag (span tag))
      :else
      (td
       (input
        :value new-tag
        :input #(reset! new-tag @%)
        )
       (button
        :click #(when-let [parsed-tag @parsed]
                  (dosync
                   (let [payload {:key @description :tag @parsed}]
                     (swap! tags conj payload)
                     (dao/put-tag payload dao/debug-fn))
                   (reset! new-tag "")))
        :disabled (cell= (not parsed))
        "+")))
     (td date)
     (td description)
     (td amount)
     (td
      ;; (button :click #(swap! tagged-txs disj @tagged-tx) "Delete")
      "button?"
      ))))
(defelem transaction-list [{:keys [tagged-txs tags]}]
  (div
   :class "transactions"
   (h2 "Transactions")
   (table
    (thead
     (tr
      (td "Tag")
      (td "Date")
      (td "Description")
      (td "Amount")
      (td "")))
    (for-tpl [tagged-tx tagged-txs]
             (render-tx :tx tagged-tx :tags tags)))))
