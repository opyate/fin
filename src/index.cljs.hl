(page "index.html"
      (:require-macros [cljs.core.async.macros :refer [go]])
      (:require [cljs.core.async :refer [ chan <! >! timeout close!]]
                [ui.els :as ui]
                [csv.upload :as csv]
                [db.dao :as dao]))

;; channel-based architecture credits https://mrmcc3.github.io/post/csv-with-clojurescript/


;; placeholders for reading things from db
(defc transactions
  #{
        })
(defc fin-tags
  #{
    {:key "BRGAS-ELECTRICITY" :tag "utilities"}
    {:key "HALIFAX" :tag "mortgage"}
    {:key "BRGAS-GAS" :tag "utilities"}
    {:key "ENFIELD" :tag "counciltax"}
    })
(defn fetch [x coll] (:tag (first (filter #(= (:key %) x) coll))))
(defc= tagged-txs (map #(assoc % :tag (fetch (:description %) fin-tags)) transactions))

(defn load [] (dao/load-into transactions))

(html
 (head
  (link :href "app.css" :rel "stylesheet" :type "text/css"))
 (body
  (h1 "Fin")
  (p "Choose a CSV file")
  (input :type "file" :accept ".csv" :change csv/put-upload)
  (button :click load "Read")

  (ui/summaries :from tagged-txs)
  (ui/transaction-list :from tagged-txs  )
  #_  (hr)
  #_  (h5 "DB + tags")
  #_  (tag-debug :from tagged-txs)
  #_  (hr)
  #_  (h5 "Tags")
  #_  (tag-debug :from fin-tags)
  ))
